---
  - name: Update
    tags: update
    shell: apt-get update

  - name: Upgrade
    tags: upgrade
    shell: apt-get -y dist-upgrade

  - name: Install RabbitMQ broker, PostgreSQL and needed dependencies
    tags: installall
    shell: apt-get install -y "{{item}}"
    with_items:
      - rabbitmq-server
      - postgresql
      - postgresql-client
      - python-psycopg2
      - libpq-dev
      - curl
      - python-dev
      - git
      - python-flup
      - nginx

  - name: Install Celery, Django and Django rest framework
    tags: celerydjangoinstall
    pip: "name={{item.name}}"
    with_items:
      - { name: 'celery' }
      - { name: 'Django' }
      - { name: 'rest_framework_ember' }
      - { name: 'djangorestframework==2.4.3' }
      - { name: 'markdown' }
      - { name: 'django-filter' }
      - { name: 'nose' }
      - { name: 'mock' }
      - { name: 'djorm-pgarray' }
      - { name: 'paramiko' }
      - { name: 'kamaki==0.13.1'}
      - { name: 'ansible==1.7.2' }
      - { name: 'uwsgi' }
      - { name: 'south' }
      - { name: 'requests' }

  - name: Copy script celeryd for daemonic workers
    tags: celerydcopy
    copy: src=celeryd dest=/etc/init.d/celeryd owner=root mode=0744
    when: is_daemon

  - name: Copy celeryd configuration
    tags: celerydconfcopy
    template: src=celeryd_conf.j2 dest=/etc/default/celeryd owner=root
    when: is_daemon

  - name: Copy script celerybeat for daemonic periodic tasks
    tags: celerybeatcopy
    copy: src=celerybeat dest=/etc/init.d/celerybeat owner=root mode=0744
    when: is_periodic_task

  - name: Copy celerybeat configuration
    tags: celerybeatconfcopy
    template: src=celerybeat_conf.j2 dest=/etc/default/celerybeat owner=root
    when: is_periodic_task

  - name: create directory for projects
    tags: createprojectdirectory
    command: mkdir {{my_project_dir}} creates={{my_project_dir}}

  - name: Git clone e-science project in the git directory
    tags: gitcloneproject
    command: git clone -b develop {{escience_repo}} {{my_project_name}} chdir={{my_project_dir}}

  - name: Install orka as a python package
    tags: orkapackageinstall
    command: python setup.py install chdir={{project_path}}/{{orka_version}}

  - name: Copy needed frontend files for nginx1
    tags: frontendcopy1
    copy: src=application.js dest={{my_project_dir}}/{{my_project_name}}/{{ember_django_dir}}/frontend/app/controllers

  - name: Copy needed frontend files for nginx2
    tags: frontendcopy2
    copy: src=homepage.js dest={{my_project_dir}}/{{my_project_name}}/{{ember_django_dir}}/frontend/app/controllers

  - name: Copy needed frontend files for nginx3
    tags: frontendcopy3
    copy: src=ember-handlebars-loader-0.0.1.js dest={{my_project_dir}}/{{my_project_name}}/{{ember_django_dir}}/frontend/app/libs

  - name: Copy package.json to webserver
    tags: cppackagejson
    copy: src=package.json dest={{my_project_dir}}/{{my_project_name}} owner=orka_admin mode=0644

  - name: Copy Gruntfile.j2 template to webserver
    tags: cpgruntfile
    template: src=Gruntfile.j2 dest={{my_project_dir}}/{{my_project_name}} owner=orka_admin mode=0644

  - name: Rename Gruntfile.j2 template to Gruntfile.js
    tags: renamegruntfile
    command: mv Gruntfile.j2 Gruntfile.js chdir={{my_project_dir}}/{{my_project_name}}
    
  - name: Download NVM
    tags: download_nvm
    shell: curl https://raw.githubusercontent.com/creationix/nvm/v0.12.1/install.sh | bash

  - name: NMV Commands in Terminal
    tags: nvm_commands
    shell: cd;bash -lc "source ~/.profile" 

  - name: Install NVM
    tags: nvm_install
    shell: cd;bash -lc "nvm install v0.11.13"

  - name: NVM default version
    tags: nvm_default
    shell: cd;bash -lc "nvm alias default v0.11.13"

  - name: Install grunt-cli
    tags: grunt-cli_install
    shell: cd;bash -lc "npm install -g grunt-cli"
   
  - name: Install and add Grunt
    tags: grunt_install_add
    shell: cd;bash -lc "npm install grunt --save-dev"

  - name: Link npm
    tags: npm_link
    shell: cd {{project_path}};bash -lc "npm link"
    
  - name: Install and add uglify
    tags: uglify_install_add
    shell: cd {{project_path}};bash -lc "npm install grunt-contrib-uglify --save-dev"

  - name: Install and add removelogging
    tags: removelogging_install_add
    shell: cd {{project_path}};bash -lc "npm install grunt-remove-logging"
    
  - name: Run grunt tasks (uglify, removelogging)
    tags: grunt_tasks_run
    shell: cd {{project_path}}; bash -lc "grunt default --force"

  - name: Edit pg_hba.conf
    lineinfile: line="local\tall\t\tpostgres\t\t\t\ttrust" dest=/etc/postgresql/9.1/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=peer)" backrefs=yes
    tags: pghbaconf_to_trust

  - name: create directories for configuration and logs
    tags: nginxconflogs
    command: mkdir "{{item}}"
    with_items: 
      - conf
      - logs

  - name: Change owner of conf and logs
    command: chown -R orka_admin:orkagroup ./conf ./logs
    tags: chownconf

  - name: Start Nginx service
    service: name=nginx state=started
    tags: nginxstart
 
  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: postgresrestart

  - name: Create PostgreSql user
    postgresql_user: name={{db_user}} password={{db_password}} role_attr_flags=CREATEDB,NOSUPERUSER,NOCREATEROLE
    tags: createpostgresuser

  - name: Create PostgreSql database
    postgresql_db: name={{db_name}} owner={{db_user}}
    tags: createpostgresdb

  - name: Copy settings.py file
    tags: settingspycopy
    copy: src=settings.py dest={{settings_path}} owner=orka_admin mode=0744

  - name: Django project migrate
    shell: python manage.py migrate chdir={{my_project_dir}}/{{my_project_name}}/{{ember_django_dir}}
    tags: djangomigrate

  - name: Revert pg_hba.conf to default
    lineinfile: line="local\tall\t\tpostgres\t\t\t\tpeer" dest=/etc/postgresql/9.1/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=trust)" backrefs=yes
    tags: pghbaconf_to_peer
 
  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: postgresrestart
   
  - name: Create Django superuser
    shell: echo "from django.contrib.auth.models import User; User.objects.create_superuser('{{django_admin_name}}', '{{django_admin_email}}', '{{django_admin_password}}')" | python manage.py shell chdir={{my_project_dir}}/{{my_project_name}}/{{ember_django_dir}}
    tags: djangosuperuser
   
  - name: Copy uwsgi.ini file
    tags: uwsgiconfcopy
    copy: src=uwsgi.ini dest=./conf owner=orka_admin mode=0744

  - name: Copy nginx.conf file
    tags: nginxconfcopy
    template: src=nginx.j2 dest=./conf owner=orka_admin

  - name: Rename nginx.j2 template to nginx.conf
    tags: renamenginxconf
    command: mv nginx.j2 nginx.conf chdir=./conf
  
  - name: Edit ngnix.conf in /etc/nginx
    lineinfile: line="include /home/orka_admin/conf/nginx.conf;" insertafter="http {" dest="/etc/nginx/nginx.conf"
    tags: editetcnginx

  - name: Restart Nginx service
    service: name=nginx state=restarted
    tags: nginxrestart

  - name: Install uwsgi-plugin-python
    apt: name=uwsgi-plugin-python state=present
    tags: installuwsgi

  - name: Start uWSGI service
    tags: startuwsgi
    command: uwsgi --ini /home/orka_admin/conf/uwsgi.ini --pidfile /tmp/uwsgi.pid
    args:
      chdir: "{{project_path}}/{{ember_django_dir}}"

  - name: Run collectstatic command
    tags: collectstatic
    command: python manage.py collectstatic --noinput
    args:
      chdir: "{{project_path}}/{{ember_django_dir}}"

  - name: Change owner of projects
    command: chown -R orka_admin:orkagroup {{my_project_dir}}
    tags: chownorka
