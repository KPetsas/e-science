--- 
  - name: Install RabbitMQ broker, PostgreSQL and needed dependencies
    tags: installall
    shell: apt-get -y install "{{item}}"
    with_items:
      - rabbitmq-server
      - postgresql
      - postgresql-client
      - python-psycopg2
      - libpq-dev

  - name: Install Celery, Django and Django rest framework
    tags: celerydjangoinstall
    pip: "name={{item.name}}"
    with_items:
      - { name: 'celery' }
      - { name: 'Django' }
      - { name: 'djangorestframework' }
      - { name: 'markdown' }
      - { name: 'django-filter' }

  - name: Copy script celeryd for daemonic workers
    tags: celerydcopy
    copy: src=celeryd dest=/etc/init.d/celeryd owner=root mode=0744
    when: is_daemon

  - name: Copy celeryd configuration
    tags: celerydconfcopy
    template: src=celeryd_conf.j2 dest=/etc/default/celeryd owner=root
    when: is_daemon

  - name: Copy script celerybeat for daemonic periodic tasks
    tags: celerybeatcopy
    copy: src=celerybeat dest=/etc/init.d/celerybeat owner=root mode=0744
    when: is_periodic_task

  - name: Copy celerybeat configuration
    tags: celerybeatconfcopy
    template: src=celerybeat_conf.j2 dest=/etc/default/celerybeat owner=root
    when: is_periodic_task

  - name: create Django project,command1
    tags: createdjangoproject1
    command: mkdir {{myprojectdir}} creates={{myprojectdir}}
    
  - name: create Django project,command2
    tags: createdjangoproject2
    command: django-admin.py startproject {{myprojectname}} chdir={{myprojectdir}} creates={{myprojectname}}/manage.py

  - name: Edit pg_hba.conf
    lineinfile: line="local\tall\t\tpostgres\t\t\t\ttrust" dest=/etc/postgresql/9.1/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=peer)" backrefs=yes
    tags: pghbaconf_to_trust
 
  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: postgresrestart

  - name: Create PostgreSql user
    postgresql_user: name={{db_user}} password={{db_password}} role_attr_flags=CREATEDB,NOSUPERUSER,NOCREATEROLE
    tags: createpostgresuser

  - name: Create PostgreSql database
    postgresql_db: name={{db_name}} owner={{db_user}}
    tags: createpostgresdb

  - name: copy Django settings.py template
    template: src=settings.j2 dest=/etc/
    tags: djangosettingscopy
    
  - name: Edit Django project settings.py
    shell: sed -i '/# Database/,$d' settings.py chdir={{myprojectdir}}/{{myprojectname}}/{{myprojectname}}
    tags: editsettings

  - name: Append settings template
    shell: cat /etc/settings.j2 >> {{settings_path}}
    tags: appendsettings

  - name: Django project migrate
    shell: python manage.py migrate chdir={{myprojectdir}}/{{myprojectname}}
    tags: djangomigrate

  - name: Revert pg_hba.conf to default
    lineinfile: line="local\tall\t\tpostgres\t\t\t\tpeer" dest=/etc/postgresql/9.1/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=trust)" backrefs=yes
    tags: pghbaconf_to_peer
 
  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: postgresrestart
   
  - name: Create Django superuser
    shell: echo "from django.contrib.auth.models import User; User.objects.create_superuser('{{django_admin_name}}', '{{django_admin_email}}', '{{django_admin_password}}')" | python manage.py shell chdir={{myprojectdir}}/{{myprojectname}}
    tags: djangosuperuser

  - name: Django runserver
    command: python manage.py runserver 0.0.0.0:{{django_port}} chdir={{myprojectdir}}/{{myprojectname}}
    tags: runserver
